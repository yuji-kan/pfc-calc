{"version":3,"sources":["data/food.ts","components/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["food","chickenBreast","calorie","protein","fat","carbo","sweetPotato","Form","orgFloor","value","base","Math","floor","useState","basalMetabolicRate","setBasalMetabolicRate","intakeCoefficient","setIntakeCoefficient","bodyWeight","setbodyWeight","bodyFat","setBodyFat","proteinCoefficient","setProteinCoefficient","mealTimes","setMealTimes","wLeanBodyMass","setwLeanBodyMass","wCalorieIntakeDay","setwCalorieIntakeDay","wChickenBreastCalorieIntake","setwChickenBreastCalorieIntake","wChickenBreast","setwChickenBreast","wChickenBreastCalorie","setwChickenBreastCalorie","wOtherProtainCalorie","setwOtherProtainCalorie","wSweetPotato","setwSweetPotato","wChickenBreastOnce","setwChickenBreastOnce","wSweetPotatoOnce","setwSweetPotatoOnce","className","onSubmit","e","preventDefault","String","Number","type","name","id","min","max","onChange","target","placeholder","step","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ead46de.chunk.js","sourcesContent":["const food = {\r\n    chickenBreast: {\r\n        calorie: 108,\r\n        protein: 22.3,\r\n        fat: 108,\r\n        carbo: 0\r\n    },\r\n    sweetPotato: {\r\n        calorie: 264,\r\n        protein: 2.4,\r\n        fat: 0.4,\r\n        carbo: 63\r\n    }\r\n}\r\n\r\nexport default food","import React, { ChangeEvent, useState, FormEvent } from 'react';\r\nimport food from \"../data/food\"\r\n\r\nconst Form: React.FC = () => {\r\n    const BASE: number = 0.1;\r\n    function orgFloor(value: number, base: number): number {\r\n        return Math.floor(value * base) / base;\r\n    }\r\n\r\n    // input useState set \r\n    const [basalMetabolicRate, setBasalMetabolicRate] = useState(\"\")\r\n    const [intakeCoefficient, setIntakeCoefficient] = useState(\"\")\r\n    const [bodyWeight, setbodyWeight] = useState(\"\")\r\n    const [bodyFat, setBodyFat] = useState(\"\")\r\n    const [proteinCoefficient, setProteinCoefficient] = useState(\"\")\r\n    const [mealTimes, setMealTimes] = useState(\"\")\r\n\r\n    // form input and set\r\n    const inputChange01 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setBasalMetabolicRate(e.target.value)\r\n    }\r\n    const inputChange02 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setIntakeCoefficient(e.target.value)\r\n    }\r\n    const inputChange03 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setbodyWeight(e.target.value)\r\n    }\r\n    const inputChange04 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setBodyFat(e.target.value)\r\n    }\r\n    const inputChange05 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProteinCoefficient(e.target.value)\r\n    }\r\n    const inputChange06 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMealTimes(e.target.value)\r\n    }\r\n\r\n    // output set\r\n    const [wLeanBodyMass, setwLeanBodyMass] = useState(\"\")\r\n    const [wCalorieIntakeDay, setwCalorieIntakeDay] = useState(\"\")\r\n    const [\r\n        wChickenBreastCalorieIntake,\r\n        setwChickenBreastCalorieIntake\r\n    ] = useState(\"\")\r\n    const [wChickenBreast, setwChickenBreast] = useState(\"\")\r\n    const [wChickenBreastCalorie, setwChickenBreastCalorie] = useState(\"\")\r\n    const [wOtherProtainCalorie, setwOtherProtainCalorie] = useState(\"\")\r\n    const [wSweetPotato, setwSweetPotato] = useState(\"\")\r\n    const [wChickenBreastOnce, setwChickenBreastOnce] = useState(\"\")\r\n    const [wSweetPotatoOnce, setwSweetPotatoOnce] = useState(\"\")\r\n\r\n    // submit button\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n\r\n        setwLeanBodyMass(String(Number(bodyWeight) - Number(bodyWeight) * (Number(bodyFat) / 100)))\r\n\r\n        setwCalorieIntakeDay(\r\n            Number(basalMetabolicRate) !== 0 && Number(intakeCoefficient) !== 0\r\n                ? String(orgFloor(Number(basalMetabolicRate) * Number(intakeCoefficient), BASE))\r\n                : \"\"\r\n        )\r\n        setwChickenBreastCalorieIntake(\r\n            Number(bodyWeight) !== 0\r\n                ? String(\r\n                    orgFloor((Number(bodyWeight) - Number(bodyWeight) * (Number(bodyFat) / 100)) *\r\n                        Number(proteinCoefficient), BASE)\r\n                )\r\n                : \"\"\r\n        )\r\n        setwChickenBreast(\r\n            Number(bodyWeight) !== 0\r\n                ? String(\r\n                    orgFloor(((Number(bodyWeight) - Number(bodyWeight) * (Number(bodyFat) / 100)) *\r\n                        Number(proteinCoefficient)) /\r\n                        Number(food.chickenBreast.protein) *\r\n                        100, BASE)\r\n                )\r\n                : \"\"\r\n        )\r\n        setwChickenBreastCalorie(\r\n            String(\r\n                orgFloor(((\r\n                    (\r\n                        (Number(bodyWeight) - Number(bodyWeight) * (Number(bodyFat) / 100)) *\r\n                        Number(proteinCoefficient) /\r\n                        Number(food.chickenBreast.protein) *\r\n                        100\r\n                    ) /\r\n                    100) *\r\n                    Number(food.chickenBreast.calorie)), BASE)\r\n            )\r\n        )\r\n        setwOtherProtainCalorie(\r\n            String(\r\n                orgFloor((Number(basalMetabolicRate) * Number(intakeCoefficient) -\r\n                    (\r\n                        (Number(bodyWeight) - Number(bodyWeight) * (Number(bodyFat) / 100)) *\r\n                        Number(proteinCoefficient) /\r\n                        Number(food.chickenBreast.protein) *\r\n                        100\r\n                        /\r\n                        100) *\r\n                    Number(food.chickenBreast.calorie)), BASE)\r\n            )\r\n        )\r\n        setwSweetPotato(\r\n            String(\r\n                orgFloor((((Number(basalMetabolicRate) * Number(intakeCoefficient)) / Number(food.sweetPotato.calorie)) *\r\n                    100), BASE)\r\n            )\r\n        )\r\n        setwChickenBreastOnce(\r\n            Number(mealTimes) !== 0\r\n                ? String(\r\n                    orgFloor(((\r\n                        (Number(bodyWeight) - Number(bodyWeight) * (Number(bodyFat) / 100)) *\r\n                        Number(proteinCoefficient) /\r\n                        Number(food.chickenBreast.protein)) *\r\n                        100\r\n                    ) / Number(mealTimes), BASE)\r\n                )\r\n                : \"\"\r\n        )\r\n        setwSweetPotatoOnce(\r\n            Number(mealTimes) !== 0\r\n                ? String(\r\n                    orgFloor((\r\n                        ((Number(basalMetabolicRate) * Number(intakeCoefficient)) /\r\n                            Number(food.sweetPotato.calorie)) *\r\n                        100\r\n                    ) / Number(mealTimes), BASE)\r\n                )\r\n                : \"\"\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='wrapper'>\r\n                <form className=\"contact-form\" onSubmit={submitHandler}>\r\n                    <div className=\"input-fields\">\r\n\r\n                        <input\r\n                            type='number'\r\n                            name='basalMetabolicRate'\r\n                            id='basalMetabolicRate'\r\n                            min={1000}\r\n                            max={2500}\r\n                            onChange={inputChange01}\r\n                            placeholder=\"基礎代謝(kcal)\"\r\n                        />\r\n                        <input\r\n                            type='number'\r\n                            name='intakeCoefficient'\r\n                            id='intakeCoefficient'\r\n                            min={1.3}\r\n                            max={1.7}\r\n                            step='0.1'\r\n                            onChange={inputChange02}\r\n                            placeholder=\"摂取係数(1.3-1.7) for diet 1.3\"\r\n                        />\r\n                        <input\r\n                            type='number'\r\n                            name='bodyWeight'\r\n                            id='bodyWeight'\r\n                            min={40}\r\n                            max={140}\r\n                            onChange={inputChange03}\r\n                            placeholder=\"体重(40-140kg)\"\r\n                        />\r\n                        <input\r\n                            type='number'\r\n                            name='bodyFat'\r\n                            id='bodyFat'\r\n                            min={3}\r\n                            max={40}\r\n                            onChange={inputChange04}\r\n                            placeholder=\"体脂肪(3-25%)\"\r\n                        />\r\n                        <input\r\n                            type='number'\r\n                            name='proteinCoefficient'\r\n                            id='proteinCoefficient'\r\n                            min={2}\r\n                            max={2.5}\r\n                            step='0.1'\r\n                            onChange={inputChange05}\r\n                            placeholder=\"Protein摂取係数(2-2.5) 2.5推奨\"\r\n                        />\r\n                        <input\r\n                            type='number'\r\n                            name='mealTimes'\r\n                            id='mealTimes'\r\n                            min={3}\r\n                            max={6}\r\n                            onChange={inputChange06}\r\n                            placeholder=\"1日の食事回数(3-6回)\"\r\n                        />\r\n                        <button className=\"btn\">計算する</button>\r\n                    </div>\r\n\r\n                    <div className=\"output\">\r\n                        <p>除脂肪体重 : {wLeanBodyMass}kg</p>\r\n                        <p>1日のカロリー摂取量 : {wCalorieIntakeDay}kcal</p>\r\n                        <p>1日の目標Protein摂取量 : {wChickenBreastCalorieIntake}g</p>\r\n                        <p>鶏むね肉の量/day : {wChickenBreast}g</p>\r\n                        <p>鶏むね肉摂取カロリー/day : {wChickenBreastCalorie}kcal</p>\r\n                        <p>Protein以外の摂取カロリー : {wOtherProtainCalorie}kcal</p>\r\n                        <p>サツマイモの量/day : {wSweetPotato}g</p>\r\n                        <p>食事が1日{mealTimes}回の場合、1回に摂取する鶏むね肉の量 : {wChickenBreastOnce}g</p>\r\n                        <p>食事が1日{mealTimes}回の場合、1回に摂取するサツマイモの量 : {wSweetPotatoOnce}g</p>\r\n                    </div>\r\n\r\n\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\r\nimport Form from './components/Form'\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Form />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}